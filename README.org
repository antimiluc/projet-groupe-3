#+TITLE: Projet Groupe 3 AJC
#+AUTHOR: Basile PRACCA, Luc ANTIMI, Luc RUBIO

* Projet
** Outils proposés
*** Trivy
[[https://github.com/aquasecurity/trivy][Github]]

#+begin_quote
Trivy (tri pronounced like trigger, vy pronounced like envy) is a simple and comprehensive scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues. Trivy detects vulnerabilities of OS packages (Alpine, RHEL, CentOS, etc.) and language-specific packages (Bundler, Composer, npm, yarn, etc.). In addition, Trivy scans Infrastructure as Code (IaC) files such as Terraform, Dockerfile and Kubernetes, to detect potential configuration issues that expose your deployments to the risk of attack. Trivy is easy to use. Just install the binary and you're ready to scan.
#+end_quote

**** Pourquoi ?
Trivy va nous permettre de tester l'image Docker et les playbooks Ansible que nous allons créer pour détecter toute =vulnerabilité= présente.

**** Installation (CentOS)
Ajouter ce repository.
#+begin_src conf :file /etc/yum.repos.d/trivy.repo
[trivy]
name=Trivy repository
baseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/$releasever/$basearch/
gpgcheck=0
enabled=1
#+end_src

Update et install.
#+begin_src sh
sudo yum -y update
sudo yum -y install trivy
#+end_src
**** Utilisation
Trivy peut tout aussi bien analyser les =fichiers= de configuration =IaC=...
#+begin_src sh :eval no
trivy config
#+end_src
... que les =images= Docker
#+begin_src sh :eval no
trivy image website-image
#+end_src

Trivy renvoit un rapport
*** Registry
[[https://hub.docker.com/_/registry][DockerHub]]

#+begin_quote
The Docker Registry 2.0 implementation for storing and distributing Docker images
#+end_quote

**** Pourquoi ?
Le registry va nous permettre de stocker les version du site web sous forme d'images Docker, prêtes à être déployées depuis n'importe où.
**** Utilisation
Start registry
#+begin_src sh :eval no
docker run -d -p 5000:5000 --restart always --name registry registry:2
#+end_src

Use registry
#+begin_src sh :eval no
docker pull ubuntu
docker tag ubuntu localhost:5000/ubuntu
docker push localhost:5000/ubuntu
#+end_src
*** Ansible
#+begin_quote
Ansible is an open-source software provisioning, configuration management, and application-deployment tool enabling infrastructure as code. It runs on many Unix-like systems, and can configure both Unix-like systems as well as Microsoft Windows. It includes its own declarative language to describe system configuration.
#+end_quote

**** Pourquoi ?
Ansible permet de manager des machines à distance et de leur faire effectuer differentes tâches de façon déclarative, nous permettant de diminuer au plus possible les changements du aux différences d'environements.
**** Utilisation
*** Tower
#+begin_quote
Ansible Tower is a REST API, web service, and web-based console designed to make Ansible easier to use for people with a wide range of IT skillsets. It is a hub for automation tasks.
#+end_quote

**** Installation
#+begin_src

#+end_src
**** Alternatives
***** Semaphore
[[https://docs.ansible-semaphore.com/][Website]]
Written in Go

* Organisation
** Pipeline Flow
On a commencé par reflechir au flow de notre pipeline, comment les outils proposés vont s'enchaîner et intéragir les uns avec les autres.

Ansible va lancer les differentes tâches, en verifiant que les outils (Docker & Trivy) ne renvoient pas d'erreurs.
Une fois cela effectuer, Ansible va envoyer l'image au registry pour garder un historique de versions et pouvoir deployer le site dans n'importe quel état.
Enfin, on peut déployer le site en production grâce à Docker.
#+begin_src plantuml :file ./rapport/tools-uml.png :mkdirp t :exports results
@startuml
Ansible -> Docker : (Playbook) Build Image
Docker -> Ansible : Image built
Ansible -> Trivy : (Playbook) Analyse Image
Trivy -> Ansible : Image Valide
Ansible -> Registry : (Playbook) Store Image
Registry -> Ansible : Image stored
Ansible -> Docker : (Playbook) Up in prod
Docker -> Ansible : Prod running
@enduml
#+end_src

#+RESULTS:
[[file:./rapport/tools-uml.png]]

** Architecture
On va réutiliser les =vagrantfiles= fournis dans un autre TP pour monter une machine =Host= avec un =Worker=.

*** Host
La machine =Host= va être responsable de faire tourner Ansible et Tower.
Il faudra au préalable installer =Python>=3.8= et =Ansible=.

Le provisioning du vagrant file s'en charge pour nous.

=Tower= sera installé grâce aux modules Ansible sur le =galaxy store=.

*** Worker
La machine =Worker= sera responsable de faire tourner les differentes =tâches= et rapporter à la machine =Host=.

Pour cela, il faudra installer =Docker= et =Trivy=, mais cela sera fait grâce aux =playbooks= Ansible

Les differents =playbooks= nécessaires:
- Install Docker :: Nous allons installer docker depuis pip, pour des soucis de facilité (il faudra donc installer Python)
- Install Trivy :: C'est trivial en ajoutant un repository ([[*Installation (CentOS)][Installation]])
- Build Image :: En utilisant le module [[https://docs.ansible.com/ansible/2.6/modules/docker_image_module.html#docker-image-module][docker_image]]
- Test Image :: [[*Utilisation][Utilisation de Trivy]]
- Store Image :: Envoyer l'image au registry
- Deploy :: Run l'image sur un container exposé à l'exterieur en utilisant le module [[https://docs.ansible.com/ansible/2.6/modules/docker_container_module.html#docker-container-module][docker_container]]
* Developpement
** Dockerfile
On est parti de l'image Alpine de Nginx pour réduire au maximum le nombre de dépendances et de potentielles vulnerabilités.
Il suffit ensuite de copier l'intégralité du code source du site dans le dossier exposé par Nginx.
** Vagrant
*** Host
**** Variables d'environements
Variables d'environements à set sur la machine =Host=
***** ANSIBLE_HOME
Le chemin absolu du dossier Ansible.

Un script est fournis pour la setup.
(Ce fichier pourrait être étendu si on a besoin d'autres variables pour les autres outils)
#+begin_src shell :eval no
cd ansible
./setup.sh
#+end_src
**** Provisioning
Les vagrantfiles étant déjà tout faits, il tout à fait possible de modifier les scripts de provisioning afin de cloner le projet et setup les variables d'environements automatiquement.
Cela dit, ce n'est pas une priorité pour l'instant.

*** Worker
Le worker va être setup et provisioné par Ansible.
** Ansible
*** Playbooks
**** Install Docker
**** Install Trivy
Pour installer Trivy il faut en prérequis que yum soit installé sur la machine client.
#+begin_src yaml
- name: Install pre-requisite packages
      yum:
        name: "{{item}}"
        state: latest
      loop:
        - yum-utils
#+end_src
Ensuite il faut mettre en place le repository yum associé à Trivy
#+begin_src yaml
- name: create trivy.repo
      yum_repository:
        name: "Trivy_repository"
        description: TRIVY YUM repo
        baseurl: "https://aquasecurity.github.io/trivy-repo/rpm/releases/$releasever/$basearch/"
        gpgcheck: no
        enabled: yes
#+end_src
Enfin il faut installer trivy avec yum install
#+begin_src yaml
- name: Install trivy
      yum:
        update_cache: yes
        name: trivy
        state: latest
      become: yes
#+end_src

**** Build image
On peut utiliser le module docker_image

#+begin_src yaml
- name: build container image
  community.docker.docker_image:
    name: "{{ registry_address }}/{{ image_name }}:{{ image_tag }}"
    build:
      path: "{{ project_dir }}"
    source: build
#+end_src
**** Lancer image
**** Scan Trivy
*** Variables d'environement
**** ANSIBLE_HOME
set with ansible directory of project
or use
#+begin_src shell :eval no
cd ansible
./setup.sh
#+end_src

* Ressources
- [[https://opensolitude.com/2015/05/26/building-docker-images-with-ansible.html][Build docker images with ansible]]
