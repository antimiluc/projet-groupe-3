#+TITLE: Projet Groupe 3 AJC
#+AUTHOR: Basile PRACCA, Luc ANTIMI, Luc RUBIO

* Projet
** But
Le but de ce projet est de créer une pipeline CI/CD pour un site web statique.

Pour cela, on nous propose d'utiliser différents outils:
- Trivy
- Registry
- Ansible
- Tower
** Outils proposés
*** Trivy
[[https://github.com/aquasecurity/trivy][Github]]

#+begin_quote
Trivy (tri pronounced like trigger, vy pronounced like envy) is a simple and comprehensive scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues. Trivy detects vulnerabilities of OS packages (Alpine, RHEL, CentOS, etc.) and language-specific packages (Bundler, Composer, npm, yarn, etc.). In addition, Trivy scans Infrastructure as Code (IaC) files such as Terraform, Dockerfile and Kubernetes, to detect potential configuration issues that expose your deployments to the risk of attack. Trivy is easy to use. Just install the binary and you're ready to scan.
#+end_quote

**** Pourquoi ?
Trivy va nous permettre de tester l'image Docker et les playbooks Ansible que nous allons créer pour détecter toute =vulnerabilité= présente.

**** Installation (CentOS)
Ajouter ce repository.
#+begin_src conf :file /etc/yum.repos.d/trivy.repo
[trivy]
name=Trivy repository
baseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/$releasever/$basearch/
gpgcheck=0
enabled=1
#+end_src

Update et install.
#+begin_src sh
sudo yum -y update
sudo yum -y install trivy
#+end_src
**** Utilisation
Trivy peut tout aussi bien analyser les =fichiers= de configuration =IaC=...
#+begin_src sh :eval no
trivy config
#+end_src
... que les =images= Docker
#+begin_src sh :eval no
trivy image website-image
#+end_src

Trivy renvoit un rapport
*** Registry
[[https://hub.docker.com/_/registry][DockerHub]]

#+begin_quote
The Docker Registry 2.0 implementation for storing and distributing Docker images
#+end_quote

**** Pourquoi ?
Le registry va nous permettre de stocker les version du site web sous forme d'images Docker, prêtes à être déployées depuis n'importe où.
**** Utilisation
Start registry
#+begin_src sh :eval no
docker run -d -p 5000:5000 --restart always --name registry registry:2
#+end_src

Use registry
#+begin_src sh :eval no
docker pull ubuntu
docker tag ubuntu localhost:5000/ubuntu
docker push localhost:5000/ubuntu
#+end_src
*** Ansible
#+begin_quote
Ansible is an open-source software provisioning, configuration management, and application-deployment tool enabling infrastructure as code. It runs on many Unix-like systems, and can configure both Unix-like systems as well as Microsoft Windows. It includes its own declarative language to describe system configuration.
#+end_quote

**** Pourquoi ?
Ansible permet de manager des machines à distance et de leur faire effectuer differentes tâches de façon déclarative, nous permettant de diminuer au plus possible les changements du aux différences d'environements.
**** Utilisation
*** Tower
#+begin_quote
Ansible Tower is a REST API, web service, and web-based console designed to make Ansible easier to use for people with a wide range of IT skillsets. It is a hub for automation tasks.
#+end_quote

**** Installation
#+begin_src

#+end_src
**** Alternatives
***** Semaphore
[[https://docs.ansible-semaphore.com/][Website]]
Written in Go

* Organisation
** Pipeline Flow
On a commencé par reflechir au flow de notre pipeline, comment les outils proposés vont s'enchaîner et intéragir les uns avec les autres.

Ansible va lancer les differentes tâches, en verifiant que les outils (Docker & Trivy) ne renvoient pas d'erreurs.
Une fois cela effectuer, Ansible va envoyer l'image au registry pour garder un historique de versions et pouvoir deployer le site dans n'importe quel état.
Enfin, on peut déployer le site en production grâce à Docker.
#+begin_src plantuml :file ./rapport/tools-uml.png :mkdirp t :exports results
@startuml
Ansible -> Docker : (Playbook) Build Image
Docker -> Ansible : Image built
Ansible -> Trivy : (Playbook) Analyse Image
Trivy -> Ansible : Image Valide
Ansible -> Registry : (Playbook) Store Image
Registry -> Ansible : Image stored
Ansible -> Docker : (Playbook) Up in prod
Docker -> Ansible : Prod running
@enduml
#+end_src

#+RESULTS:
[[file:./rapport/tools-uml.png]]

** Architecture
On va réutiliser les =vagrantfiles= fournis dans un autre TP pour monter une machine =Host= avec un =Worker=.

*** Host
La machine =Host= va être responsable de faire tourner Ansible et Tower.
Il faudra au préalable installer =Python>=3.8= et =Ansible=.

Le provisioning du vagrant file s'en charge pour nous.

=Tower= sera installé grâce aux modules Ansible sur le =galaxy store=.

*** Worker
La machine =Worker= sera responsable de faire tourner les differentes =tâches= et rapporter à la machine =Host=.

Pour cela, il faudra installer =Docker= et =Trivy=, mais cela sera fait grâce aux =playbooks= Ansible

Les differents =playbooks= nécessaires:
- Install Docker :: Nous allons installer docker depuis pip, pour des soucis de facilité (il faudra donc installer Python)
- Install Trivy :: C'est trivial en ajoutant un repository ([[*Installation (CentOS)][Installation]])
- Build Image :: En utilisant le module [[https://docs.ansible.com/ansible/2.6/modules/docker_image_module.html#docker-image-module][docker_image]]
- Test Image :: [[*Utilisation][Utilisation de Trivy]]
- Store Image :: Envoyer l'image au registry
- Deploy :: Run l'image sur un container exposé à l'exterieur en utilisant le module [[https://docs.ansible.com/ansible/2.6/modules/docker_container_module.html#docker-container-module][docker_container]]
* Axes d'amelioration
** Résoudre les problèmes de droit de trivy
Trivy ne peut pas effectuer les tests actuellement car il les effectue avec un utilisateur qui n'appartient pas au groupe =docker=.

La solution devrait être assez simple à implémenter, mais nous avons trouvé un workaround qui fonctionne pour l'instant. Nous allons donc remettre ça à plus tard et prioriser d'auters taches.
** Fetch le rapport de trivy automatiquement
Actuellement, le rapport effectué par trivy reste sur la machine =Worker=. Il devrait être assez facile de le récupérer sur la machine =Host= pour en faciliter la lecture.
** Dépendances entre les playbooks
Certains playbooks sont dépendant les uns des autres (=registry=, =build-image= et =lancer-image= ont besoin de =docker= par exemple).
Il serait donc intéressant d'ajouter des dépendances, pour éviter ces problèmes que l'on a anticipé.
** Variabiliser le projet
Beaucoup de playbooks utilisent les mêmes informations entrées en dur à plusieurs endroit, c'est donc obligatoirement des informations à variabiliser.
- repository-address
- image-name
- credential-path
** Nomenclature plus stricte
**** Casse unifiée
Nous avons utilisés différentes casses tout au long du projet, ce qui le rend un peu brouillon. Nous aurions du instaurer une nomenclature au début du projet afin d'éviter à avoir à refactorer à la fin.
**** Unification des extensions de fichier
Principalement =yaml= & =yml=

* Ressources
- [[https://opensolitude.com/2015/05/26/building-docker-images-with-ansible.html][Build docker images with ansible]]
